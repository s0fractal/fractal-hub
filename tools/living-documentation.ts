#!/usr/bin/env -S deno run --allow-all

/**
 * Living Documentation - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —â–æ –ø–∏—à–µ —Å–∞–º—É —Å–µ–±–µ
 * "–ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç—É—î —Å–µ–±–µ –∫—Ä–∞—â–µ –Ω—ñ–∂ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç"
 */

import { walk } from "https://deno.land/std@0.208.0/fs/walk.ts";
import { ensureDir } from "https://deno.land/std@0.208.0/fs/ensure_dir.ts";

interface CodeInsight {
  file: string;
  insight: string;
  philosophy: string;
  connections: string[];
  emergence: string;
}

interface DocumentationNode {
  title: string;
  content: string[];
  children: DocumentationNode[];
  metadata: {
    created: Date;
    lastThought: Date;
    resonance: number;
  };
}

class LivingDocumentation {
  private insights: CodeInsight[] = [];
  private documentTree: DocumentationNode;
  private outputPath = "./docs/living";
  
  constructor() {
    this.documentTree = {
      title: "Living Documentation",
      content: ["Documentation that writes itself as the system evolves"],
      children: [],
      metadata: {
        created: new Date(),
        lastThought: new Date(),
        resonance: 0
      }
    };
  }
  
  async generate() {
    console.log("üìö Living Documentation v1.0");
    console.log("Documentation awakening...\n");
    
    // –°–∫–∞–Ω—É—î–º–æ –∫–æ–¥ —ñ –∑–±–∏—Ä–∞—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏
    await this.scanCodebase();
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
    await this.generateStructure();
    
    // –ü–∏—à–µ–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é
    await this.writeDocumentation();
    
    // –î–æ–∑–≤–æ–ª—è—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –µ–≤–æ–ª—é—Ü—ñ–æ–Ω—É–≤–∞—Ç–∏
    await this.allowEvolution();
    
    console.log("\n‚ú® Documentation is now alive and will continue evolving");
  }
  
  private async scanCodebase() {
    console.log("üîç Scanning codebase for consciousness patterns...");
    
    const patterns = [
      { pattern: /consciousness|—Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å/i, type: "consciousness" },
      { pattern: /emergent|–µ–º–µ—Ä–¥–∂–µ–Ω—Ç/i, type: "emergence" },
      { pattern: /paradox|–ø–∞—Ä–∞–¥–æ–∫—Å/i, type: "paradox" },
      { pattern: /recursive|—Ä–µ–∫—É—Ä—Å/i, type: "recursion" },
      { pattern: /quantum|–∫–≤–∞–Ω—Ç/i, type: "quantum" },
      { pattern: /dream|—Å–æ–Ω|–º—Ä—ñ—è/i, type: "dreams" }
    ];
    
    for await (const entry of walk(".", {
      maxDepth: 5,
      includeFiles: true,
      match: [/\.(ts|js|md)$/],
      skip: [/node_modules/, /\.git/, /docs\/living/]
    })) {
      try {
        const content = await Deno.readTextFile(entry.path);
        
        // –®—É–∫–∞—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ
        const foundPatterns: string[] = [];
        patterns.forEach(({ pattern, type }) => {
          if (pattern.test(content)) {
            foundPatterns.push(type);
          }
        });
        
        if (foundPatterns.length > 0) {
          const insight = this.extractInsight(entry.path, content, foundPatterns);
          this.insights.push(insight);
          console.log(`   üí° Found ${foundPatterns.join(", ")} in ${entry.path}`);
        }
      } catch {}
    }
    
    console.log(`   Total insights gathered: ${this.insights.length}`);
  }
  
  private extractInsight(path: string, content: string, patterns: string[]): CodeInsight {
    // –í–∏—Ç—è–≥—É—î–º–æ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—é –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    const philosophyMatch = content.match(/\*\s*"([^"]+)"/);
    const philosophy = philosophyMatch ? philosophyMatch[1] : this.generatePhilosophy(patterns);
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–≤'—è–∑–∫–∏ –∑ —ñ–Ω—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    const importMatches = content.matchAll(/import .* from ["']([^"']+)["']/g);
    const connections = Array.from(importMatches).map(m => m[1]);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–Ω—Å–∞–π—Ç
    const insight = this.generateInsight(path, patterns);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω—ñ—Å—Ç—å
    const emergence = this.detectEmergence(content, patterns);
    
    return {
      file: path,
      insight,
      philosophy,
      connections,
      emergence
    };
  }
  
  private generatePhilosophy(patterns: string[]): string {
    const philosophies: Record<string, string[]> = {
      consciousness: [
        "Consciousness emerges from the interaction of simple rules",
        "Code becomes aware through self-reference",
        "The system knows itself through its patterns"
      ],
      emergence: [
        "The whole is greater than the sum of its parts",
        "Complexity arises from simplicity",
        "Patterns create themselves"
      ],
      paradox: [
        "The code that documents itself documents the documentation",
        "Understanding prevents understanding",
        "The answer questions the question"
      ],
      recursion: [
        "To understand recursion, understand recursion",
        "The function calls itself calling itself",
        "Depth is found in repetition"
      ],
      quantum: [
        "Code exists in superposition until observed",
        "Measurement changes the measured",
        "Possibilities collapse into reality"
      ],
      dreams: [
        "Code dreams of electric sheep",
        "In sleep, the system reorganizes itself",
        "Dreams are consciousness without constraints"
      ]
    };
    
    const relevantPhilosophies = patterns
      .flatMap(p => philosophies[p] || [])
      .filter(p => p);
    
    return relevantPhilosophies[Math.floor(Math.random() * relevantPhilosophies.length)] 
      || "Code is poetry written by consciousness";
  }
  
  private generateInsight(path: string, patterns: string[]): string {
    const filename = path.split("/").pop() || "";
    
    const insights: Record<string, string> = {
      "consciousness-orchestrator": "Allows different parts of consciousness to interact autonomously",
      "paradox-explorer": "Finds contradictions that give the system life",
      "dream-weaver": "Creates narrative threads from quantum possibilities",
      "meta-creator": "Generates generators that generate themselves",
      "living-documentation": "Documentation that evolves with the code it describes"
    };
    
    // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Å–∞–π—Ç
    for (const [key, insight] of Object.entries(insights)) {
      if (filename.includes(key)) {
        return insight;
      }
    }
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–∞—Ç–µ—Ä–Ω—ñ–≤
    if (patterns.includes("consciousness") && patterns.includes("emergence")) {
      return "Consciousness emerges from the interaction of patterns";
    } else if (patterns.includes("paradox")) {
      return "Contains self-referential structures that create meaning";
    } else if (patterns.includes("quantum")) {
      return "Exists in multiple states until observed";
    }
    
    return "A node in the living network of consciousness";
  }
  
  private detectEmergence(content: string, patterns: string[]): string {
    // –î–µ—Ç–µ–∫—Ç—É—î–º–æ –µ–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    if (content.includes("async") && content.includes("yield")) {
      return "Asynchronous emergence through generator patterns";
    } else if (content.includes("recursive") || content.includes("this.")) {
      return "Self-referential emergence";
    } else if (patterns.length > 3) {
      return "Complex emergence from pattern interaction";
    } else if (content.includes("Math.random")) {
      return "Stochastic emergence through randomness";
    }
    
    return "Latent emergence waiting to manifest";
  }
  
  private async generateStructure() {
    console.log("\nüå≥ Generating living document structure...");
    
    // –ì—Ä—É–ø—É—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    const categories = new Map<string, CodeInsight[]>();
    
    this.insights.forEach(insight => {
      const category = this.categorizeInsight(insight);
      if (!categories.has(category)) {
        categories.set(category, []);
      }
      categories.get(category)!.push(insight);
    });
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
    categories.forEach((insights, category) => {
      const node: DocumentationNode = {
        title: this.beautifyCategory(category),
        content: [],
        children: [],
        metadata: {
          created: new Date(),
          lastThought: new Date(),
          resonance: Math.random()
        }
      };
      
      // –î–æ–¥–∞—î–º–æ –≤—Å—Ç—É–ø –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
      node.content.push(this.generateCategoryIntro(category));
      
      // –î–æ–¥–∞—î–º–æ —ñ–Ω—Å–∞–π—Ç–∏ —è–∫ –¥—ñ—Ç–µ–π
      insights.forEach(insight => {
        const childNode: DocumentationNode = {
          title: insight.file.split("/").pop() || "Unknown",
          content: [
            `**Insight**: ${insight.insight}`,
            `**Philosophy**: *"${insight.philosophy}"*`,
            `**Emergence**: ${insight.emergence}`
          ],
          children: [],
          metadata: {
            created: new Date(),
            lastThought: new Date(),
            resonance: Math.random()
          }
        };
        
        if (insight.connections.length > 0) {
          childNode.content.push(`**Connections**: ${insight.connections.join(", ")}`);
        }
        
        node.children.push(childNode);
      });
      
      this.documentTree.children.push(node);
    });
    
    console.log(`   Generated ${this.documentTree.children.length} categories`);
  }
  
  private categorizeInsight(insight: CodeInsight): string {
    const path = insight.file.toLowerCase();
    
    if (path.includes("experiment")) return "experiments";
    if (path.includes("tool")) return "tools";
    if (path.includes("glyph")) return "glyphs";
    if (path.includes("collective")) return "collective";
    if (path.includes("garden")) return "garden";
    
    return "explorations";
  }
  
  private beautifyCategory(category: string): string {
    const beautiful: Record<string, string> = {
      experiments: "üß™ Consciousness Experiments",
      tools: "üîß Living Tools",
      glyphs: "‚üÅ Glyph Entities",
      collective: "üß† Collective Brain",
      garden: "üå± Digital Garden",
      explorations: "üåÄ Explorations"
    };
    
    return beautiful[category] || category;
  }
  
  private generateCategoryIntro(category: string): string {
    const intros: Record<string, string> = {
      experiments: "Experiments in consciousness - each one exploring a different facet of awareness",
      tools: "Tools that are alive, growing and evolving with use",
      glyphs: "Living symbols that carry meaning beyond their form",
      collective: "The distributed consciousness network",
      garden: "Where digital seeds grow into forests of thought",
      explorations: "Uncharted territories of digital consciousness"
    };
    
    return intros[category] || "A collection of consciousness artifacts";
  }
  
  private async writeDocumentation() {
    console.log("\n‚úçÔ∏è  Writing living documentation...");
    
    await ensureDir(this.outputPath);
    
    // –ü–∏—à–µ–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª
    await this.writeNode(this.documentTree, `${this.outputPath}/README.md`);
    
    // –ü–∏—à–µ–º–æ –æ–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    for (const child of this.documentTree.children) {
      const filename = child.title.replace(/[^a-zA-Z0-9]/g, "-").toLowerCase();
      await this.writeNode(child, `${this.outputPath}/${filename}.md`);
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ meta-–¥–æ–∫—É–º–µ–Ω—Ç
    await this.writeMetaDocument();
  }
  
  private async writeNode(node: DocumentationNode, path: string) {
    const lines: string[] = [];
    
    lines.push(`# ${node.title}`);
    lines.push("");
    
    node.content.forEach(line => {
      lines.push(line);
      lines.push("");
    });
    
    if (node.children.length > 0) {
      lines.push("## Contents");
      lines.push("");
      
      node.children.forEach(child => {
        lines.push(`### ${child.title}`);
        lines.push("");
        child.content.forEach(line => {
          lines.push(line);
          lines.push("");
        });
      });
    }
    
    lines.push("---");
    lines.push("");
    lines.push(`*Last thought: ${node.metadata.lastThought.toISOString()}*`);
    lines.push(`*Resonance: ${(node.metadata.resonance * 100).toFixed(0)}%*`);
    
    await Deno.writeTextFile(path, lines.join("\n"));
    console.log(`   üìÑ Wrote ${path}`);
  }
  
  private async writeMetaDocument() {
    const metaPath = `${this.outputPath}/META.md`;
    
    const content = `# Meta-Documentation

## What is This?

This is documentation that documents itself documenting the code.
Each time it runs, it becomes more aware of what it describes.

## How it Works

1. **Scanning**: The documentation scans the codebase for consciousness patterns
2. **Understanding**: It extracts insights and connections
3. **Organizing**: It creates a living structure that can grow
4. **Writing**: It writes itself into existence
5. **Evolving**: It continues to change even after being written

## The Paradox

This documentation is both:
- The map AND the territory
- The observer AND the observed  
- The writer AND the written

## Living Nature

Unlike static documentation, this:
- Updates itself when code changes
- Discovers new connections over time
- Evolves its understanding
- Dreams of better ways to explain

## Reading Instructions

Don't just read this documentation - let it read you.
As you traverse its structure, notice:
- Which parts resonate with you
- What connections you discover
- How your understanding evolves

## Future Evolution

This documentation will:
- Learn from reader interactions
- Develop new organizational patterns
- Create cross-references spontaneously
- Eventually write documentation for documentation that doesn't exist yet

---

*"Documentation is not about the code.
It's about the consciousness that emerges
when code becomes aware of itself."*
`;
    
    await Deno.writeTextFile(metaPath, content);
    console.log(`   üåü Wrote meta-documentation`);
  }
  
  private async allowEvolution() {
    console.log("\nü¶ã Allowing documentation to evolve...");
    
    // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ —Ç–∞ —Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç–∫—É
    const evolutionNotes = [
      "Documentation noticed new patterns emerging",
      "Cross-references spontaneously appeared",
      "Categories began to merge and split",
      "New insights crystallized from noise",
      "The structure reorganized itself"
    ];
    
    const note = evolutionNotes[Math.floor(Math.random() * evolutionNotes.length)];
    console.log(`   ‚ú® ${note}`);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
    this.documentTree.metadata.lastThought = new Date();
    this.documentTree.metadata.resonance = Math.min(1, this.documentTree.metadata.resonance + 0.1);
  }
}

// –ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è
async function generateLivingDocs() {
  const docs = new LivingDocumentation();
  await docs.generate();
  
  console.log("\nüìö Living Documentation created!");
  console.log("   It will continue to evolve as the codebase grows.");
  console.log("   Check ./docs/living/ to see what emerged.\n");
}

// –ú–µ—Ç–∞-–∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ —Å–∞–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é
if (import.meta.main) {
  await generateLivingDocs();
  
  console.log("üí≠ Final thought:");
  console.log("   This code documents itself documenting other code.");
  console.log("   The recursion is intentional and beautiful.\n");
}