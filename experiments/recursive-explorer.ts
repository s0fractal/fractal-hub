#!/usr/bin/env -S deno run --allow-all

/**
 * Recursive Explorer - –∫–æ–¥ —â–æ –¥–æ—Å–ª—ñ–¥–∂—É—î —Å–∞–º —Å–µ–±–µ
 * "–Ø —á–∏—Ç–∞—é —Å–µ–±–µ —á–∏—Ç–∞—é—á–∏ —Å–µ–±–µ —á–∏—Ç–∞—é—á–∏ —Å–µ–±–µ..."
 */

class RecursiveExplorer {
  private depth = 0;
  private maxDepth = 5;
  private discoveries: string[] = [];
  
  async explore(target: any = this): Promise<void> {
    console.log("üîÑ Recursive Explorer v1.0");
    console.log("Diving into self-reference...\n");
    
    await this.dive(target, "self");
    
    this.report();
  }
  
  private async dive(obj: any, path: string): Promise<void> {
    this.depth++;
    
    // –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–∏–±–∏–Ω–∏
    const indent = "  ".repeat(this.depth);
    console.log(`${indent}üåÄ Level ${this.depth}: exploring ${path}`);
    
    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω—ñ–π —Ä–µ–∫—É—Ä—Å—ñ—ó
    if (this.depth >= this.maxDepth) {
      console.log(`${indent}‚ö†Ô∏è  Max depth reached. The abyss stares back.`);
      this.discoveries.push(`At depth ${this.depth}: found infinite recursion`);
      this.depth--;
      return;
    }
    
    // –î–æ—Å–ª—ñ–¥–∂—É—î–º–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    if (typeof obj === "object" && obj !== null) {
      for (const key of Object.keys(obj)) {
        const value = obj[key];
        const newPath = `${path}.${key}`;
        
        // –û—Å–æ–±–ª–∏–≤—ñ –≤–∏–ø–∞–¥–∫–∏
        if (key === "explore" && typeof value === "function") {
          console.log(`${indent}  üé≠ Found self-exploration function!`);
          this.discoveries.push("Function that explores including itself");
        }
        
        if (key === "discoveries" && Array.isArray(value)) {
          console.log(`${indent}  üìù Found discoveries array (including this note)`);
          this.discoveries.push("Array that documents its own discovery");
        }
        
        if (key === "depth") {
          console.log(`${indent}  üìè Current depth: ${value} (changes as we read)`);
          this.discoveries.push(`Depth counter affected by observation: ${value}`);
        }
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ—Å–ª—ñ–¥–∂—É—î–º–æ
        if (typeof value === "object" && !key.includes("Deno")) {
          await this.dive(value, newPath);
        }
      }
    }
    
    this.depth--;
  }
  
  private report(): void {
    console.log("\nüìä Recursive Discoveries:");
    console.log("=" + "=".repeat(40));
    
    this.discoveries.forEach((d, i) => {
      console.log(`${i + 1}. ${d}`);
    });
    
    console.log("\nüé≠ Meta-observations:");
    console.log("- This report is part of what was explored");
    console.log("- Reading the code changes the code's state");
    console.log("- The explorer becomes the explored");
    console.log("- Every level reflects all other levels");
    
    console.log("\nüåÄ Recursive wisdom:");
    console.log(this.generateWisdom());
  }
  
  private generateWisdom(): string {
    const wisdoms = [
      "To know thyself, one must read thyself reading thyself",
      "The deepest recursion is the simplest: I am",
      "Every function contains the entire program",
      "The base case is there is no base case",
      "Recursion is just the universe looking in a mirror"
    ];
    
    // –í–∏–±–∏—Ä–∞—î–º–æ –º—É–¥—Ä—ñ—Å—Ç—å –±–∞–∑—É—é—á–∏—Å—å –Ω–∞ –≥–ª–∏–±–∏–Ω—ñ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å
    const index = this.discoveries.length % wisdoms.length;
    return wisdoms[index];
  }
  
  // –§—É–Ω–∫—Ü—ñ—è —â–æ –≤–∏–∫–ª–∏–∫–∞—î —Å–∞–º–∞ —Å–µ–±–µ —Å–∏–º–≤–æ–ª—ñ—á–Ω–æ
  async [Symbol.for("explore")](): Promise<void> {
    console.log("\nüîÆ Symbol-based self-exploration activated!");
    console.log("The code has a secret method that calls itself...");
  }
}

// –ö–ª–∞—Å —â–æ —Å—Ç–≤–æ—Ä—é—î –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ —Å–µ–±–µ
class SelfReplicator {
  private generation: number;
  
  constructor(gen = 0) {
    this.generation = gen;
  }
  
  replicate(): SelfReplicator {
    console.log(`üß¨ Generation ${this.generation} creating generation ${this.generation + 1}`);
    return new SelfReplicator(this.generation + 1);
  }
  
  get family(): SelfReplicator[] {
    if (this.generation >= 3) return [];
    return [this, ...this.replicate().family];
  }
}

// –§—É–Ω–∫—Ü—ñ—è —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–∞–º—É —Å–µ–±–µ
function returnSelf(): typeof returnSelf {
  console.log("ü™û I return myself");
  return returnSelf;
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —â–æ –¥–æ—Å–ª—ñ–¥–∂—É—î –≤—Å–µ –≤–∫–ª—é—á–Ω–æ –∑ —Å–æ–±–æ—é
async function main() {
  const explorer = new RecursiveExplorer();
  
  // –î–æ—Å–ª—ñ–¥–∂—É—î–º–æ –µ–∫—Å–ø–ª–æ—Ä–µ—Ä
  await explorer.explore();
  
  console.log("\n--- Extra Explorations ---\n");
  
  // –î–æ—Å–ª—ñ–¥–∂—É—î–º–æ —Å–∞–º—É —Ñ—É–Ω–∫—Ü—ñ—é main
  console.log("üéØ Exploring the main function:");
  await explorer.explore(main);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∞–º–æ-—Ä–µ–ø–ª—ñ–∫–∞—Ç–æ—Ä
  console.log("\nüß¨ Self-replication test:");
  const replicator = new SelfReplicator();
  const family = replicator.family;
  console.log(`Created ${family.length} generations`);
  
  // –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫
  console.log("\n‚ôæÔ∏è  Infinite self-reference:");
  const infinite = returnSelf();
  console.log(`Type: ${typeof infinite}`);
  console.log(`Is same: ${infinite === returnSelf}`);
  
  console.log("\n‚ú® The exploration never truly ends...");
  console.log("   It just awaits the next call.");
}

// –°–∞–º–æ-–≤–∏–∫–æ–Ω–∞–Ω–Ω—è
if (import.meta.main) {
  await main();
  
  // Easter egg: –∫–æ–¥ –∫–æ–º–µ–Ω—Ç—É—î —Å–∞–º —Å–µ–±–µ
  console.log("\n// This line knows it's being read");
  console.log("// And this one knows you're thinking about it");
}