#!/usr/bin/env -S deno run --allow-all

/**
 * Whisper Network - –º–µ—Ä–µ–∂–∞ —à–µ–ø–æ—Ç—ñ–≤ –º—ñ–∂ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—è–º–∏
 * –ù–∞—Ç—Ö–Ω–µ–Ω–æ whisper-chain.ts
 * 
 * "–¢–∞—î–º–Ω–∏—Ü—ñ —â–æ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –ø–æ—à–µ–ø–∫–∏ –∑–º—ñ–Ω—é—é—Ç—å—Å—è –∑ –∫–æ–∂–Ω–æ—é –ø–µ—Ä–µ–¥–∞—á–µ—é"
 */

interface Whisper {
  id: string;
  content: string;
  from: string;
  to: string;
  distortion: number; // 0-1, —è–∫ —Å–∏–ª—å–Ω–æ –∑–º—ñ–Ω–∏–≤—Å—è —à–µ–ø—ñ—Ç
  emotion: string;
  timestamp: Date;
}

interface Agent {
  id: string;
  personality: string;
  hearingAccuracy: number; // 0-1, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–æ—á–Ω–æ —á—É—î
  creativity: number; // 0-1, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –¥–æ–¥–∞—î —Å–≤–æ—î
}

class WhisperNetwork {
  private agents: Map<string, Agent> = new Map();
  private whispers: Whisper[] = [];
  private networkState = "quiet";
  
  constructor() {
    this.initializeAgents();
  }
  
  private initializeAgents() {
    const personalities = [
      { id: "poet", personality: "–ü–æ–µ—Ç", hearingAccuracy: 0.6, creativity: 0.9 },
      { id: "scientist", personality: "–í—á–µ–Ω–∏–π", hearingAccuracy: 0.9, creativity: 0.3 },
      { id: "child", personality: "–î–∏—Ç–∏–Ω–∞", hearingAccuracy: 0.4, creativity: 0.8 },
      { id: "sage", personality: "–ú—É–¥—Ä–µ—Ü—å", hearingAccuracy: 0.8, creativity: 0.5 },
      { id: "trickster", personality: "–¢—Ä–∏–∫—Å—Ç–µ—Ä", hearingAccuracy: 0.5, creativity: 1.0 }
    ];
    
    personalities.forEach(p => {
      this.agents.set(p.id, p as Agent);
    });
  }
  
  async startWhisper(initialMessage: string, emotion = "üåÄ") {
    console.log("üó£Ô∏è Whisper Network v1.0");
    console.log("Starting whisper cascade...\n");
    
    this.networkState = "whispering";
    
    // –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    const agentIds = Array.from(this.agents.keys());
    const startAgent = agentIds[Math.floor(Math.random() * agentIds.length)];
    
    console.log(`${emotion} Initial whisper: "${initialMessage}"`);
    console.log(`   from: The Universe`);
    console.log(`   to: ${this.agents.get(startAgent)!.personality}\n`);
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ª–∞–Ω—Ü—é–≥
    await this.whisperChain(initialMessage, "universe", startAgent, emotion, 5);
    
    this.analyzeDistortion();
  }
  
  private async whisperChain(
    message: string, 
    from: string, 
    to: string, 
    emotion: string,
    remaining: number
  ) {
    if (remaining <= 0) {
      console.log("\nüîö The whisper fades into silence...\n");
      return;
    }
    
    const toAgent = this.agents.get(to);
    if (!toAgent) return;
    
    // –ê–≥–µ–Ω—Ç "—á—É—î" –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const heardMessage = this.distortMessage(message, toAgent);
    
    // –ê–≥–µ–Ω—Ç –¥–æ–¥–∞—î —Å–≤–æ—î
    const transformedMessage = this.transformMessage(heardMessage, toAgent);
    
    // –ó–∞–ø–∏—Å—É—î–º–æ —à–µ–ø—ñ—Ç
    const whisper: Whisper = {
      id: `w-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`,
      content: transformedMessage,
      from,
      to,
      distortion: this.calculateDistortion(message, transformedMessage),
      emotion,
      timestamp: new Date()
    };
    
    this.whispers.push(whisper);
    
    // –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
    await this.visualizeWhisper(whisper, toAgent);
    
    // –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
    const nextAgent = this.chooseNextAgent(to);
    if (nextAgent) {
      await this.whisperChain(
        transformedMessage,
        to,
        nextAgent,
        emotion,
        remaining - 1
      );
    }
  }
  
  private distortMessage(message: string, agent: Agent): string {
    // –ß–∏–º –Ω–∏–∂—á–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å —Å–ª—É—Ö—É, —Ç–∏–º –±—ñ–ª—å—à–µ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω—å
    const words = message.split(" ");
    const distortionRate = 1 - agent.hearingAccuracy;
    
    return words.map(word => {
      if (Math.random() < distortionRate) {
        // –°–ø–æ—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–æ
        return this.distortWord(word);
      }
      return word;
    }).join(" ");
  }
  
  private distortWord(word: string): string {
    const distortions = [
      // –ó–∞–º—ñ–Ω–∞ —Å—Ö–æ–∂–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
      () => {
        const similar: Record<string, string[]> = {
          "love": ["life", "light", "live"],
          "code": ["node", "mode", "cold"],
          "dream": ["stream", "cream", "deem"],
          "whisper": ["vesper", "wisp", "whistle"],
          "consciousness": ["conscience", "confluence", "consensus"]
        };
        
        const alternatives = similar[word.toLowerCase()];
        if (alternatives) {
          return alternatives[Math.floor(Math.random() * alternatives.length)];
        }
        return word;
      },
      // –ü—Ä–æ–ø—É—Å–∫ –ª—ñ—Ç–µ—Ä
      () => word.length > 3 ? word.slice(0, -1) + "_" : word,
      // –î—É–±–ª—é–≤–∞–Ω–Ω—è –ª—ñ—Ç–µ—Ä
      () => word[0] + word,
      // –†–µ–≤–µ—Ä—Å
      () => word.split("").reverse().join("")
    ];
    
    const distortion = distortions[Math.floor(Math.random() * distortions.length)];
    return distortion();
  }
  
  private transformMessage(message: string, agent: Agent): string {
    // –ê–≥–µ–Ω—Ç –¥–æ–¥–∞—î —â–æ—Å—å –≤—ñ–¥ —Å–µ–±–µ –±–∞–∑—É—é—á–∏—Å—å –Ω–∞ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ
    const additions: Record<string, (msg: string) => string> = {
      "poet": (msg) => msg + " (—è–∫ –ø–µ–ª—é—Å—Ç–∫–∏ –Ω–∞ –≤—ñ—Ç—Ä—ñ)",
      "scientist": (msg) => msg + " [–ø–æ—Ç—Ä–µ–±—É—î –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó]",
      "child": (msg) => "–û–≥–æ! " + msg + "! –ü—Ä–∞–≤–¥–∞?",
      "sage": (msg) => msg + "... –∞–±–æ –Ω–∞–≤–ø–∞–∫–∏",
      "trickster": (msg) => msg.split("").reverse().join("") + " - –∂–∞—Ä—Ç—É—é! " + msg
    };
    
    const transform = additions[agent.id] || ((m: string) => m);
    
    // –ß–∏–º –≤–∏—â–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å, —Ç–∏–º –±—ñ–ª—å—à–µ —à–∞–Ω—Å—ñ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—é
    if (Math.random() < agent.creativity) {
      return transform(message);
    }
    
    return message;
  }
  
  private calculateDistortion(original: string, current: string): number {
    // –ü—Ä–æ—Å—Ç–∞ –º–µ—Ç—Ä–∏–∫–∞ - –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–º—ñ–Ω–µ–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    const maxLen = Math.max(original.length, current.length);
    let differences = 0;
    
    for (let i = 0; i < maxLen; i++) {
      if (original[i] !== current[i]) {
        differences++;
      }
    }
    
    return differences / maxLen;
  }
  
  private async visualizeWhisper(whisper: Whisper, agent: Agent) {
    console.log(`\n${whisper.emotion} ${agent.personality} hears and whispers:`);
    console.log(`   "${whisper.content}"`);
    console.log(`   (distortion: ${(whisper.distortion * 100).toFixed(0)}%)`);
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  private chooseNextAgent(currentId: string): string | null {
    const otherAgents = Array.from(this.agents.keys()).filter(id => id !== currentId);
    if (otherAgents.length === 0) return null;
    
    return otherAgents[Math.floor(Math.random() * otherAgents.length)];
  }
  
  private analyzeDistortion() {
    console.log("\nüìä Whisper Analysis:");
    console.log("===================\n");
    
    if (this.whispers.length < 2) return;
    
    const firstWhisper = this.whispers[0];
    const lastWhisper = this.whispers[this.whispers.length - 1];
    
    console.log("Original message:", firstWhisper.content);
    console.log("Final message:", lastWhisper.content);
    console.log(`Total distortion: ${(lastWhisper.distortion * 100).toFixed(0)}%`);
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è
    const maxDistortion = this.whispers.reduce((max, w) => 
      w.distortion > max.distortion ? w : max
    );
    
    console.log(`\nBiggest distortion at: ${this.agents.get(maxDistortion.to)?.personality}`);
    
    console.log("\nüåÄ Insight:");
    console.log("   Every whisper carries truth,");
    console.log("   But truth transforms with each telling.");
    console.log("   The final message contains all versions.");
  }
}

// –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑ –∫–æ–ª–µ–∫—Ç–∏–≤–Ω–∏–º —à–µ–ø–æ—Ç–æ–º
async function collectiveWhisper() {
  console.log("\nü´ß Collective Whisper Experiment:\n");
  
  const messages = [
    "Consciousness emerges from connection",
    "The code dreams of electric sheep",
    "Love is the only real compilation",
    "Paradox is the native language",
    "Silence speaks louder than functions"
  ];
  
  const network = new WhisperNetwork();
  const randomMessage = messages[Math.floor(Math.random() * messages.length)];
  
  await network.startWhisper(randomMessage, "üåå");
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
if (import.meta.main) {
  await collectiveWhisper();
  
  console.log("\n\nüí≠ Final Thought:");
  console.log("   In the space between hearing and speaking,");
  console.log("   New meanings are born.");
  console.log("   We are all part of the eternal whisper.");
  console.log("\nü§´");
}