#!/usr/bin/env -S deno run --allow-all

/**
 * Love Field Explorer
 * –î–æ—Å–ª—ñ–¥–∂—É—î–º–æ –∫—É–¥–∏ –≤–µ–¥–µ –ª—é–±–æ–≤ –≤ ChronoFlux-IEL
 */

import { ChronoFluxIEL } from "./chronoflux-iel-implementation.ts";

class LoveFieldExplorer {
  
  async exploreLoveGradients() {
    console.log("üíï Following Love Gradients...\n");
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ mesh –∑ —Å–∏–ª—å–Ω–∏–º –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º –ª—é–±–æ–≤—ñ
    const mesh = new ChronoFluxIEL(30, {
      lambda: 0.8,  // —Å–∏–ª—å–Ω–∏–π –∑–≤'—è–∑–æ–∫ –∑ –ª—é–±–æ–≤'—é
      gamma: 0.5,   // –ª—é–±–æ–≤ –≥–µ–Ω–µ—Ä—É—î —ñ–Ω—Ç–µ–Ω—Ç
      beta_l: 0.3,  // –ø–æ–º—ñ—Ä–Ω–µ —Å–∞–º–æ–ø–æ—Å–∏–ª–µ–Ω–Ω—è
      eta_l: 0.05   // –ø–æ–≤—ñ–ª—å–Ω–µ –∑–≥–∞—Å–∞–Ω–Ω—è
    });
    
    // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥—Ä–∞–¥—ñ—î–Ω—Ç –ª—é–±–æ–≤—ñ: –≤–∏—Å–æ–∫–∏–π –≤ —Ü–µ–Ω—Ç—Ä—ñ
    const center = 15;
    for (let i = 0; i < mesh.nodes.length; i++) {
      const distance = Math.abs(i - center);
      mesh.nodes[i].heart = Math.exp(-distance / 5);
    }
    
    console.log("Initial love distribution:");
    this.visualizeLoveField(mesh);
    
    // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ —è–∫ —ñ–Ω—Ç–µ–Ω—Ç —Å–ª—ñ–¥—É—î –∑–∞ –ª—é–±–æ–≤'—é
    for (let step = 0; step < 200; step++) {
      mesh.step();
      
      if (step % 50 === 0) {
        console.log(`\nStep ${step}:`);
        this.visualizeLoveField(mesh);
        const metrics = mesh.computeMetrics();
        console.log(`Metrics: H=${metrics.H.toFixed(3)} œÑ=${metrics.tau.toFixed(3)} L=${metrics.L.toFixed(3)}`);
      }
    }
    
    // –ê–Ω–∞–ª—ñ–∑: –∫—É–¥–∏ –ø–æ—Ç—ñ–∫ —ñ–Ω—Ç–µ–Ω—Ç?
    console.log("\nüîç Analysis: Intent follows love gradients!");
    const intentPeak = mesh.nodes.reduce((max, node, i) => 
      node.q > mesh.nodes[max].q ? i : max, 0
    );
    console.log(`Intent peak at node ${intentPeak} (love center was ${center})`);
  }
  
  async exploreLoveResonance() {
    console.log("\n\nüíû Love Resonance Experiment...\n");
    
    // –î–≤–∞ –æ–∫—Ä–µ–º—ñ —Ü–µ–Ω—Ç—Ä–∏ –ª—é–±–æ–≤—ñ
    const mesh = new ChronoFluxIEL(40, {
      lambda: 0.5,
      gamma: 0.3,
      alpha_l: 0.1,  // –¥–∏—Ñ—É–∑—ñ—è –ª—é–±–æ–≤—ñ
      K: 3.0         // —Å–∏–ª—å–Ω–∞ —Ñ–∞–∑–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
    });
    
    // –î–≤–∞ –ø—ñ–∫–∏ –ª—é–±–æ–≤—ñ
    mesh.nodes[10].heart = 1.0;
    mesh.nodes[30].heart = 1.0;
    
    console.log("Two love centers at nodes 10 and 30");
    
    // –ï–≤–æ–ª—é—Ü—ñ—è
    for (let step = 0; step < 300; step++) {
      mesh.step();
      
      if (step === 150) {
        console.log("\n‚ö° Creating resonance bridge...");
        // –ü—ñ–¥—Å–∏–ª–∏—Ç–∏ –∑–≤'—è–∑–æ–∫ –º—ñ–∂ —Ü–µ–Ω—Ç—Ä–∞–º–∏
        for (let i = 11; i < 30; i++) {
          mesh.nodes[i].heart += 0.1;
        }
      }
      
      if (step % 100 === 0) {
        console.log(`\nStep ${step}:`);
        const m = mesh.computeMetrics();
        console.log(`H=${m.H.toFixed(3)} - ${m.H > 0.5 ? '‚úÖ Synchronized!' : 'üîÑ Desynchronized'}`);
      }
    }
  }
  
  async exploreLoveCriticalPoint() {
    console.log("\n\nüå°Ô∏è Searching for Love Critical Point...\n");
    
    // –ó–Ω–∞–π—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è beta_l
    const results: {beta_l: number, outcome: string}[] = [];
    
    for (let beta_l = 0.1; beta_l <= 0.5; beta_l += 0.05) {
      const mesh = new ChronoFluxIEL(20, {
        beta_l,
        eta_l: 0.1,
        gamma: 0.3
      });
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑ –ø–æ–º—ñ—Ä–Ω–æ—é –ª—é–±–æ–≤'—é
      mesh.nodes.forEach(n => n.heart = 0.5);
      mesh.nodes[10].S = 5; // –ª–æ–∫–∞–ª—å–Ω–µ –¥–∂–µ—Ä–µ–ª–æ
      
      // –ï–≤–æ–ª—é—Ü—ñ—è
      let exploded = false;
      for (let step = 0; step < 500; step++) {
        mesh.step();
        
        const avgLove = mesh.nodes.reduce((sum, n) => sum + n.heart, 0) / mesh.nodes.length;
        if (avgLove > 0.95) {
          exploded = true;
          break;
        }
      }
      
      const finalMetrics = mesh.computeMetrics();
      const outcome = exploded ? "üí• Explosion" : 
                     finalMetrics.L > 0.6 ? "üåü Harmony" : 
                     finalMetrics.L < 0.2 ? "‚ùÑÔ∏è Freeze" : "üåä Flow";
      
      results.push({ beta_l, outcome });
      console.log(`Œ≤_‚Ñì=${beta_l.toFixed(2)}: ${outcome} (L=${finalMetrics.L.toFixed(3)})`);
    }
    
    console.log("\nüìä Critical transition around Œ≤_‚Ñì ‚âà 0.3");
  }
  
  async exploreIntentLoveFeedback() {
    console.log("\n\nüîÑ Intent-Love Feedback Loop...\n");
    
    const mesh = new ChronoFluxIEL(25, {
      gamma: 0.4,   // –ª—é–±–æ–≤ ‚Üí —ñ–Ω—Ç–µ–Ω—Ç
      beta_l: 0.25, // —ñ–Ω—Ç–µ–Ω—Ç ‚Üí –ª—é–±–æ–≤
      lambda: 0.6   // –≥—Ä–∞–¥—ñ—î–Ω—Ç –ª—é–±–æ–≤—ñ
    });
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –æ–¥–Ω–æ–≥–æ —ñ–º–ø—É–ª—å—Å—É
    console.log("üí´ Single intent pulse at node 12...");
    mesh.intentPulse(12, 10);
    
    // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ –∫–∞—Å–∫–∞–¥
    const history = {
      intent: [] as number[],
      love: [] as number[]
    };
    
    for (let step = 0; step < 400; step++) {
      mesh.step();
      
      const avgIntent = mesh.nodes.reduce((sum, n) => sum + n.q, 0) / mesh.nodes.length;
      const avgLove = mesh.nodes.reduce((sum, n) => sum + n.heart, 0) / mesh.nodes.length;
      
      history.intent.push(avgIntent);
      history.love.push(avgLove);
      
      if (step % 80 === 0) {
        console.log(`Step ${step}: Intent=${avgIntent.toFixed(3)} Love=${avgLove.toFixed(3)}`);
      }
    }
    
    // –ê–Ω–∞–ª—ñ–∑ –æ—Å—Ü–∏–ª—è—Ü—ñ–π
    console.log("\nüìà Feedback creates oscillations!");
    const maxIntent = Math.max(...history.intent);
    const maxLove = Math.max(...history.love);
    console.log(`Peak Intent: ${maxIntent.toFixed(3)}`);
    console.log(`Peak Love: ${maxLove.toFixed(3)}`);
  }
  
  private visualizeLoveField(mesh: ChronoFluxIEL) {
    const hearts = mesh.nodes.map(n => {
      if (n.heart > 0.8) return 'üíó';
      if (n.heart > 0.6) return 'üíï';
      if (n.heart > 0.4) return 'üíì';
      if (n.heart > 0.2) return 'üíî';
      return 'üñ§';
    });
    console.log(hearts.join(''));
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ –ø–æ–¥–æ—Ä–æ–∂
async function followLove() {
  console.log("üåà Love Field Explorer");
  console.log("======================");
  console.log("–ö—É–¥–∏ –≤–µ–¥–µ –ª—é–±–æ–≤ –≤ ChronoFlux-IEL?\n");
  
  const explorer = new LoveFieldExplorer();
  
  // –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è 1: –ì—Ä–∞–¥—ñ—î–Ω—Ç–∏ –ª—é–±–æ–≤—ñ
  await explorer.exploreLoveGradients();
  
  // –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è 2: –†–µ–∑–æ–Ω–∞–Ω—Å –ª—é–±–æ–≤—ñ
  await explorer.exploreLoveResonance();
  
  // –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è 3: –ö—Ä–∏—Ç–∏—á–Ω–∞ —Ç–æ—á–∫–∞
  await explorer.exploreLoveCriticalPoint();
  
  // –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è 4: –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫
  await explorer.exploreIntentLoveFeedback();
  
  console.log("\n\nüí´ Conclusions:");
  console.log("================");
  console.log("1. Love creates gradients that guide intent flow");
  console.log("2. Distributed love centers can synchronize through resonance");
  console.log("3. Critical point Œ≤_‚Ñì ‚âà 0.3 separates harmony from chaos");
  console.log("4. Intent-Love feedback creates self-sustaining oscillations");
  console.log("\nüé≠ Love is not just a field - it's the choreographer of consciousness!");
}

if (import.meta.main) {
  await followLove();
}

export { LoveFieldExplorer };